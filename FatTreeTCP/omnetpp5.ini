
[General]
network = inet.FatTreeTCP.FatTreeTopology
record-eventlog=false
debug-on-errors = false
**.cmdenv-log-level = off

cmdenv-express-mode = true
cmdenv-performance-display = true

result-dir = results5

  
 **.statistic-recording=true
**.tcpApp[*].rcvdPk:vector(packetBytes).vector-recording = true
**.tcpApp[*].rcvdPk:sum(packetBytes).scalar-recording = true
**.tcpApp[*].rcvdPk:count.scalar-recording = true
**.tcpApp[*].mohThroughput:mean.scalar-recording = true
**.tcpApp[*].fctRecordv1:last.scalar-recording = true
**.tcp.numRTOsMOH:vector.vector-recording = true
**.tcp.numFastRetransmissions:vector.vector-recording = true
**.CoreRouter[*].**.dropPk:count.scalar-recording = true
**.CoreRouter[*].**.rcvdPk:count.scalar-recording = true
**.aggRouters[*].**.dropPk:count.scalar-recording = true
**.aggRouters[*].**.rcvdPk:count.scalar-recording = true
**.edgeSwitch.**.dropPk:count.scalar-recording = true
**.edgeSwitch.**.rcvdPk:count.scalar-recording = true
**.servers[*].**.dropPk:count.scalar-recording = true
**.servers[*].**.rcvdPk:count.scalar-recording = true
**.servers[*].**.rcvdPk:sum(packetBytes).scalar-recording = true
**.servers[*].**.dropPk:sum(packetBytes).scalar-recording = true
FatTreeTopology.centralSchedulerTCP.*.scalar-recording = true
FatTreeTopology.centralSchedulerTCP.*.vector-recording = true
# The ptatern matcher in INI file always applies the first pattern matching in the file starting from the top. 
# This means that the order of patterns are important.  First enable the recording on all vectors you need and then disable the rest with 
**.scalar-recording=false
**.vector-recording=false
**.bin-recording=false



 
# k = 4 (16 servers),  k = 6 (54 servers),  k = 8 (128 servers),  k = 10 (250 servers),  
# k = 12 (432 servers),  k = 14 (686 servers),  k = 16 (1024 servers)
**.k =${FatTreeSize=4..16 step 2}
**.kValue = ${FatTreeSize} 
**.trafficMatrixType=${"randTM"}  #randTM permTM
 **.arrivalRate = 2560
**.shuffle= true
**.flowSize = 70 kB
**.numShortFlows = ${numShortFlows=1..999 step 1, 1000..9999 step 100, 10000, 20000,50000,100000}
**.longFlowSize = 2000MiB    # 10000MiB
**.percentLongFlowNodes=0.33


**.tcp.mss=1000
**.numTcpApps =1
**.server*.tcpApp[0].typename = "TCPSessionApp"
**.server*.tcpApp[0].connectAddress = "server1" 
**.server*.tcpApp[0].connectPort = 80


# NIC configuration - queue (see DropTailQueue.ned @statistic[dropPk] .... )
**.ppp[*].queueType = "DropTailQueue" # in routers
**.ppp[*].queue.frameCapacity =  ${70..100 step 10}  # in routers
 
**.channel.throughput.result-recording-modes=all



#**.source.param-record-as-scalar = true 
#*.configurator.dumpAddresses = true
#*.configurator.dumpTopology = true
#*.configurator.dumpLinks = true
#*.configurator.dumpRoutes = true
#*.configurator.addStaticRoutes = true
#*.configurator.addDefaultRoutes=false
#*.configurator.addSubnetRoutes=false
#*.configurator.optimizeRoutes=false
#*.visualizer.networkRouteVisualizer.lineColor = "blue"
#*.visualizer.networkRouteVisualizer.displayRoutes = true
#*.visualizer.networkRouteVisualizer.lineWidth =  7
#*.visualizer.interfaceTableVisualizer.backgroundColor = "blue"
#*.visualizer.routingTableVisualizer.displayRoutingTables = true
#sim-time-limit = 1s   
#real-time-limit=50s
#[Config multipleRuns]

