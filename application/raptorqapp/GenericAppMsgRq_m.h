//
// Generated file, do not edit! Created by nedtool 5.2 from inet/raptorqimplementation/application/raptorqapp/GenericAppMsgRq.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_GENERICAPPMSGRQ_M_H
#define __INET_GENERICAPPMSGRQ_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/raptorqimplementation/application/raptorqapp/GenericAppMsgRq.msg:21</tt> by nedtool.
 * <pre>
 * //
 * // Message class for generic request-reply style applications.
 * // The client sends a ~GenericAppMsg which contains the number of
 * // bytes the client wants the server to send back as reply.
 * //
 * // This way intelligence (behaviour specific to the modelled application,
 * // e.g. HTTP, SMB, database protocol) needs only to be present in
 * // the client, and the server model can be kept simple and dumb.
 * //
 * // \@see ~TCPGenericSrvApp, TCPGenericCliAppBase (C++ only)
 * //
 * packet GenericAppMsgRq
 * {
 *     int ESI;
 *     int SBN;
 *     int fileId;              // 
 *     int opcode;              // 1 Read request (RRQ), 2 Write request (WRQ)
 *     int numSymbolsToGet;  //  if this is a reader(receiver)
 *     bool isClient;  // receiver 
 * 
 *     int numSymbolsToSend;  //  if this is a writer(sender)
 * 
 *     bool isReader;
 *     bool isWriter;
 * 
 *     int expectedReplyLength; // in bytes
 *     double replyDelay;       // reply after this many seconds
 *     bool serverClose;        // if true, server should close the
 *                              // connection after sending the reply
 * }
 * </pre>
 */
class INET_API GenericAppMsgRq : public ::omnetpp::cPacket
{
  protected:
    int ESI;
    int SBN;
    int fileId;
    int opcode;
    int numSymbolsToGet;
    bool isClient;
    int numSymbolsToSend;
    bool isReader;
    bool isWriter;
    int expectedReplyLength;
    double replyDelay;
    bool serverClose;

  private:
    void copy(const GenericAppMsgRq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GenericAppMsgRq&);

  public:
    GenericAppMsgRq(const char *name=nullptr, short kind=0);
    GenericAppMsgRq(const GenericAppMsgRq& other);
    virtual ~GenericAppMsgRq();
    GenericAppMsgRq& operator=(const GenericAppMsgRq& other);
    virtual GenericAppMsgRq *dup() const override {return new GenericAppMsgRq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getESI() const;
    virtual void setESI(int ESI);
    virtual int getSBN() const;
    virtual void setSBN(int SBN);
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getOpcode() const;
    virtual void setOpcode(int opcode);
    virtual int getNumSymbolsToGet() const;
    virtual void setNumSymbolsToGet(int numSymbolsToGet);
    virtual bool getIsClient() const;
    virtual void setIsClient(bool isClient);
    virtual int getNumSymbolsToSend() const;
    virtual void setNumSymbolsToSend(int numSymbolsToSend);
    virtual bool getIsReader() const;
    virtual void setIsReader(bool isReader);
    virtual bool getIsWriter() const;
    virtual void setIsWriter(bool isWriter);
    virtual int getExpectedReplyLength() const;
    virtual void setExpectedReplyLength(int expectedReplyLength);
    virtual double getReplyDelay() const;
    virtual void setReplyDelay(double replyDelay);
    virtual bool getServerClose() const;
    virtual void setServerClose(bool serverClose);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GenericAppMsgRq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GenericAppMsgRq& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_GENERICAPPMSGRQ_M_H

